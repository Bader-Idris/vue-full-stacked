# upstream Server {
#   server Server:3000;
# }

# upstream Client {
#   server Client:8080;
# }

# http {
  # events {}
  server {
    include /etc/nginx/mime.types;
    listen 80;
    server_name baderidris.com;

    server_tokens off;
    # more_clear_headers Server; this removes sever name for req.headers

    # this is to send files without caching, or use max-age=3600 using seconds! so this is an hour
    add_header Cache-Control max-age=7200;

    location /dist {
      alias /usr/share/nginx/html;
    }

    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # ðŸ”´ðŸ”´ proxy_set_header Host $http_host; allows ports while $host is for prod
      proxy_set_header X-Nginx-Proxy true;
      proxy_pass http://app:3000;
      proxy_redirect off;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
      proxy_set_header X-Forwarded-Proto $scheme;

      # change it if users upload videos.
      client_max_body_size    10m;
      client_body_buffer_size 128k;
        # 90 seconds
      proxy_connect_timeout   90;
      proxy_send_timeout      90;
      proxy_read_timeout      90;
      proxy_buffers           32 4k;

      # for vue configs brough from router.vuejs.org
      # try_files $uri /index.html;
      # try_files $uri /usr/share/nginx/html/dist/index.html;
      # try_files $uri $uri/ /usr/share/nginx/html/dist/index.html;
    }
  }
  # to reload nginx use: docker exec -it <container_id>
  # nginx -s reload
# }
# 6. Implement rate limiting to prevent abuse or brute-force attacks. This can be achieved using the `ngx_http_limit_req_module` or third-party modules like `ngx_http_limit_req_zone`.
# 7. Enable logging and monitoring to detect and respond to potential security incidents. Monitor access logs, error logs, and other relevant logs to identify suspicious activities.







# nginx.conf official file

# user       www www;  ## Default: nobody
# worker_processes  5;  ## Default: 1
# error_log  logs/error.log;
# pid        logs/nginx.pid;
# worker_rlimit_nofile 8192;

# events {
#   worker_connections  4096;  ## Default: 1024
# }

# http {
#   include    conf/mime.types;
#   include    /etc/nginx/proxy.conf;
#   include    /etc/nginx/fastcgi.conf;
#   index    index.html index.htm index.php;

#   default_type application/octet-stream;
#   log_format   main '$remote_addr - $remote_user [$time_local]  $status '
#     '"$request" $body_bytes_sent "$http_referer" '
#     '"$http_user_agent" "$http_x_forwarded_for"';
#   access_log   logs/access.log  main;
#   sendfile     on;
#   tcp_nopush   on;
#   server_names_hash_bucket_size 128; # this seems to be required for some vhosts

#   server { # php/fastcgi
#     listen       80;
#     server_name  domain1.com www.domain1.com;
#     access_log   logs/domain1.access.log  main;
#     root         html;

#     location ~ \.php$ {
#       fastcgi_pass   127.0.0.1:1025;
#     }
#   }

#   server { # simple reverse-proxy
#     listen       80;
#     server_name  domain2.com www.domain2.com;
#     access_log   logs/domain2.access.log  main;

#     # serve static files
#     location ~ ^/(images|javascript|js|css|flash|media|static)/  {
#       root    /var/www/virtual/big.server.com/htdocs;
#       expires 30d;
#     }

#     # pass requests for dynamic content to rails/turbogears/zope, et al
#     location / {
#       proxy_pass      http://127.0.0.1:8080;
#     }
#   }

#   upstream big_server_com {
#     server 127.0.0.3:8000 weight=5;
#     server 127.0.0.3:8001 weight=5;
#     server 192.168.0.1:8000;
#     server 192.168.0.1:8001;
#   }

#   server { # simple load balancing
#     listen          80;
#     server_name     big.server.com;
#     access_log      logs/big.server.access.log main;

#     location / {
#       proxy_pass      http://big_server_com;
#     }
#   }
# }